{"version":3,"sources":["components/Header/Header.js","components/Home/Post/Post.js","components/Home/Home.js","components/Dashboard/Dashboard.js","components/Contact/Contact.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","className","Brand","href","Toggle","aria-controls","Collapse","id","Nav","to","Post","props","onClick","alert","title","body","Home","state","posts","axios","get","then","response","setState","data","slice","catch","err","console","log","this","map","post","key","Component","Dashboard","Contact","Footer","App","path","exact","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oQAwBeA,EApBA,WACX,OACI,gCACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,OAAOC,UAAU,2BAC1C,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,cACA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKP,UAAU,WACX,4BACI,4BAAI,kBAAC,IAAD,CAASQ,GAAG,QAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,aAAZ,cACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,WAAZ,kB,iDCHjBC,EAVF,SAAAC,GACT,OACI,yBAAKV,UAAU,OAAOW,QAAS,kBAAMC,MAAM,gBAAkBF,EAAMG,SAC/D,yBAAKb,UAAU,UAAf,UACA,wBAAIA,UAAU,SAASU,EAAMG,OAC7B,uBAAGb,UAAU,QAAQU,EAAMI,QC6BxBC,E,4MA9BXC,MAAQ,CACJC,MAAO,I,kEAGU,IAAD,OAChBC,IAAMC,IAAI,cACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAAEL,MAAOI,EAASE,KAAKC,MAAM,EAAG,QAEjDC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,Q,+BAKpB,IAAMT,EAAQY,KAAKb,MAAMC,MAAMa,KAAI,SAAAC,GAC/B,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAKzB,GAAIO,MAAOkB,EAAKlB,MAAOC,KAAMiB,EAAKjB,UAI1D,OACI,yBAAKd,UAAU,QAEX,yBAAKA,UAAU,SAASiB,Q,GAzBrBgB,aCGJC,EANG,WACd,OACI,yBAAKlC,UAAU,aAAf,wCCIOmC,EANC,WACZ,OACI,yBAAKnC,UAAU,WAAf,sCCIOoC,EANA,WACX,OACI,qD,MCwBOC,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,kBAAC,IAAD,CAAUhC,GAAG,aACjD,kBAAC,IAAD,CAAO8B,KAAK,QAAQG,UAAW1B,IAC/B,kBAAC,IAAD,CAAOuB,KAAK,aAAaG,UAAWP,IACpC,kBAAC,IAAD,CAAOI,KAAK,WAAWG,UAAWN,KAEpC,kBAAC,EAAD,SCTYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASP,OACP,kBAAC,EAAD,MACAQ,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd7B,OAAM,SAAA8B,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.3105e5ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <Navbar bg=\"primary\" variant=\"dark\" className=\"justify-content-between\">\r\n                <Navbar.Brand href=\"#\">React-Demo</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        <ul>\r\n                            <li><NavLink to=\"home\">Home</NavLink></li>\r\n                            <li><NavLink to=\"dashboard\">Dashboard</NavLink></li>    \r\n                            <li><NavLink to=\"contact\">Contact</NavLink></li>\r\n                        </ul>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst Post = props => {\r\n    return (\r\n        <div className=\"Post\" onClick={() => alert('You clicked: ' + props.title)}>\r\n            <div className=\"poster\">Poster</div>\r\n            <h4 className=\"title\">{props.title}</h4>\r\n            <p className=\"body\">{props.body}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Post from './Post/Post';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        posts: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('posts.json')\r\n            .then(response => {\r\n                this.setState({ posts: response.data.slice(0, 5) });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const posts = this.state.posts.map(post => {\r\n            return (\r\n                <Post key={post.id} title={post.title} body={post.body}/>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div className=\"Home\">\r\n                {/* <div>Home Component</div> */}\r\n                <div className=\"Posts\">{posts}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <div className=\"Dashboard\">Placeholder for Dashboard Component</div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div className=\"Contact\">Placeholder for Contact Component</div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>Footer component</footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Header from './components/Header/Header';\nimport Home from './components/Home/Home';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport Contact from './components/Contact/Contact';\nimport Footer from './components/Footer/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <Header />\n        <Switch>\n          <Route path=\"/\" exact render={() => <Redirect to=\"/home\"/>} />\n          <Route path=\"/home\" component={Home} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/contact\" component={Contact} />\n        </Switch>\n        <Footer />\n      </div>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}